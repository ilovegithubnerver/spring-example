/**
 * This class is generated by jOOQ
 */
package com.example.jooq_generated.tables;


import com.example.jooq_generated.DefaultSchema;
import com.example.jooq_generated.Keys;
import com.example.jooq_generated.tables.records.ContactRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 联系人
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contact extends TableImpl<ContactRecord> {

    private static final long serialVersionUID = -1298453472;

    /**
     * The reference instance of <code>contact</code>
     */
    public static final Contact CONTACT = new Contact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactRecord> getRecordType() {
        return ContactRecord.class;
    }

    /**
     * The column <code>contact.NAME</code>. 姓名
     */
    public final TableField<ContactRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "姓名");

    /**
     * The column <code>contact.PHONE</code>. 电话
     */
    public final TableField<ContactRecord, String> PHONE = createField("PHONE", org.jooq.impl.SQLDataType.VARCHAR.length(11).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "电话");

    /**
     * The column <code>contact.EMAIL</code>. 邮箱
     */
    public final TableField<ContactRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR.length(150).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "邮箱");

    /**
     * The column <code>contact.GROUPING</code>. 分组 jobName
     */
    public final TableField<ContactRecord, String> GROUPING = createField("GROUPING", org.jooq.impl.SQLDataType.VARCHAR.length(30).defaultValue(org.jooq.impl.DSL.inline("DEFAULT", org.jooq.impl.SQLDataType.VARCHAR)), this, "分组 jobName");

    /**
     * The column <code>contact.IS_ENABLE</code>. 0 禁用 1 启动
     */
    public final TableField<ContactRecord, String> IS_ENABLE = createField("IS_ENABLE", org.jooq.impl.SQLDataType.CHAR.length(1).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.CHAR)), this, "0 禁用 1 启动");

    /**
     * Create a <code>contact</code> table reference
     */
    public Contact() {
        this("contact", null);
    }

    /**
     * Create an aliased <code>contact</code> table reference
     */
    public Contact(String alias) {
        this(alias, CONTACT);
    }

    private Contact(String alias, Table<ContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contact(String alias, Table<ContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "联系人");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContactRecord>> getKeys() {
        return Arrays.<UniqueKey<ContactRecord>>asList(Keys.KEY_CONTACT_UNIQUE_NAME_GROUPING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contact as(String alias) {
        return new Contact(alias, this);
    }

    /**
     * Rename this table
     */
    public Contact rename(String name) {
        return new Contact(name, null);
    }
}
