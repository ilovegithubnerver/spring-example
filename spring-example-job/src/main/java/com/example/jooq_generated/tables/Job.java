/**
 * This class is generated by jOOQ
 */
package com.example.jooq_generated.tables;


import com.example.jooq_generated.DefaultSchema;
import com.example.jooq_generated.Keys;
import com.example.jooq_generated.tables.records.JobRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 定时任务
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Job extends TableImpl<JobRecord> {

    private static final long serialVersionUID = -869916724;

    /**
     * The reference instance of <code>job</code>
     */
    public static final Job JOB = new Job();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecord> getRecordType() {
        return JobRecord.class;
    }

    /**
     * The column <code>job.JOB_NAME</code>. 任务名
     */
    public final TableField<JobRecord, String> JOB_NAME = createField("JOB_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "任务名");

    /**
     * The column <code>job.JOB_GROUP</code>. 任务组
     */
    public final TableField<JobRecord, String> JOB_GROUP = createField("JOB_GROUP", org.jooq.impl.SQLDataType.VARCHAR.length(30).defaultValue(org.jooq.impl.DSL.inline("DEFAULT", org.jooq.impl.SQLDataType.VARCHAR)), this, "任务组");

    /**
     * The column <code>job.JOB_CLASS_NAME</code>. 任务实现类
     */
    public final TableField<JobRecord, String> JOB_CLASS_NAME = createField("JOB_CLASS_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(200).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "任务实现类");

    /**
     * The column <code>job.TRIGGER_TYPE</code>. 触发器类型 SIMPLE 普通 CRON 表达式
     */
    public final TableField<JobRecord, String> TRIGGER_TYPE = createField("TRIGGER_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(10).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "触发器类型 SIMPLE 普通 CRON 表达式");

    /**
     * The column <code>job.TRIGGER_CRON</code>. CRON 表达式
     */
    public final TableField<JobRecord, String> TRIGGER_CRON = createField("TRIGGER_CRON", org.jooq.impl.SQLDataType.VARCHAR.length(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "CRON 表达式");

    /**
     * The column <code>job.TRIGGER_INTERVAL</code>. 执行间隔（毫秒）
     */
    public final TableField<JobRecord, Integer> TRIGGER_INTERVAL = createField("TRIGGER_INTERVAL", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "执行间隔（毫秒）");

    /**
     * The column <code>job.TRIGGER_REPEAT</code>. 重复执行次数
     */
    public final TableField<JobRecord, Integer> TRIGGER_REPEAT = createField("TRIGGER_REPEAT", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "重复执行次数");

    /**
     * The column <code>job.JAR_PATH</code>. JAR包文件名，包括目录
     */
    public final TableField<JobRecord, String> JAR_PATH = createField("JAR_PATH", org.jooq.impl.SQLDataType.VARCHAR.length(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "JAR包文件名，包括目录");

    /**
     * The column <code>job.IS_ENABLE</code>. 0 禁用 1 启动
     */
    public final TableField<JobRecord, String> IS_ENABLE = createField("IS_ENABLE", org.jooq.impl.SQLDataType.CHAR.length(1).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.CHAR)), this, "0 禁用 1 启动");

    /**
     * Create a <code>job</code> table reference
     */
    public Job() {
        this("job", null);
    }

    /**
     * Create an aliased <code>job</code> table reference
     */
    public Job(String alias) {
        this(alias, JOB);
    }

    private Job(String alias, Table<JobRecord> aliased) {
        this(alias, aliased, null);
    }

    private Job(String alias, Table<JobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "定时任务");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobRecord> getPrimaryKey() {
        return Keys.KEY_JOB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobRecord>> getKeys() {
        return Arrays.<UniqueKey<JobRecord>>asList(Keys.KEY_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Job as(String alias) {
        return new Job(alias, this);
    }

    /**
     * Rename this table
     */
    public Job rename(String name) {
        return new Job(name, null);
    }
}
